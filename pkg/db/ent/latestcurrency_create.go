// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/chain-manager/pkg/db/ent/latestcurrency"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// LatestCurrencyCreate is the builder for creating a LatestCurrency entity.
type LatestCurrencyCreate struct {
	config
	mutation *LatestCurrencyMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (lcc *LatestCurrencyCreate) SetCreatedAt(u uint32) *LatestCurrencyCreate {
	lcc.mutation.SetCreatedAt(u)
	return lcc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (lcc *LatestCurrencyCreate) SetNillableCreatedAt(u *uint32) *LatestCurrencyCreate {
	if u != nil {
		lcc.SetCreatedAt(*u)
	}
	return lcc
}

// SetUpdatedAt sets the "updated_at" field.
func (lcc *LatestCurrencyCreate) SetUpdatedAt(u uint32) *LatestCurrencyCreate {
	lcc.mutation.SetUpdatedAt(u)
	return lcc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (lcc *LatestCurrencyCreate) SetNillableUpdatedAt(u *uint32) *LatestCurrencyCreate {
	if u != nil {
		lcc.SetUpdatedAt(*u)
	}
	return lcc
}

// SetDeletedAt sets the "deleted_at" field.
func (lcc *LatestCurrencyCreate) SetDeletedAt(u uint32) *LatestCurrencyCreate {
	lcc.mutation.SetDeletedAt(u)
	return lcc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (lcc *LatestCurrencyCreate) SetNillableDeletedAt(u *uint32) *LatestCurrencyCreate {
	if u != nil {
		lcc.SetDeletedAt(*u)
	}
	return lcc
}

// SetCoinTypeID sets the "coin_type_id" field.
func (lcc *LatestCurrencyCreate) SetCoinTypeID(u uuid.UUID) *LatestCurrencyCreate {
	lcc.mutation.SetCoinTypeID(u)
	return lcc
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (lcc *LatestCurrencyCreate) SetNillableCoinTypeID(u *uuid.UUID) *LatestCurrencyCreate {
	if u != nil {
		lcc.SetCoinTypeID(*u)
	}
	return lcc
}

// SetFeedType sets the "feed_type" field.
func (lcc *LatestCurrencyCreate) SetFeedType(s string) *LatestCurrencyCreate {
	lcc.mutation.SetFeedType(s)
	return lcc
}

// SetNillableFeedType sets the "feed_type" field if the given value is not nil.
func (lcc *LatestCurrencyCreate) SetNillableFeedType(s *string) *LatestCurrencyCreate {
	if s != nil {
		lcc.SetFeedType(*s)
	}
	return lcc
}

// SetMarketValueHigh sets the "market_value_high" field.
func (lcc *LatestCurrencyCreate) SetMarketValueHigh(d decimal.Decimal) *LatestCurrencyCreate {
	lcc.mutation.SetMarketValueHigh(d)
	return lcc
}

// SetNillableMarketValueHigh sets the "market_value_high" field if the given value is not nil.
func (lcc *LatestCurrencyCreate) SetNillableMarketValueHigh(d *decimal.Decimal) *LatestCurrencyCreate {
	if d != nil {
		lcc.SetMarketValueHigh(*d)
	}
	return lcc
}

// SetMarketValueLow sets the "market_value_low" field.
func (lcc *LatestCurrencyCreate) SetMarketValueLow(d decimal.Decimal) *LatestCurrencyCreate {
	lcc.mutation.SetMarketValueLow(d)
	return lcc
}

// SetNillableMarketValueLow sets the "market_value_low" field if the given value is not nil.
func (lcc *LatestCurrencyCreate) SetNillableMarketValueLow(d *decimal.Decimal) *LatestCurrencyCreate {
	if d != nil {
		lcc.SetMarketValueLow(*d)
	}
	return lcc
}

// SetID sets the "id" field.
func (lcc *LatestCurrencyCreate) SetID(u uuid.UUID) *LatestCurrencyCreate {
	lcc.mutation.SetID(u)
	return lcc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (lcc *LatestCurrencyCreate) SetNillableID(u *uuid.UUID) *LatestCurrencyCreate {
	if u != nil {
		lcc.SetID(*u)
	}
	return lcc
}

// Mutation returns the LatestCurrencyMutation object of the builder.
func (lcc *LatestCurrencyCreate) Mutation() *LatestCurrencyMutation {
	return lcc.mutation
}

// Save creates the LatestCurrency in the database.
func (lcc *LatestCurrencyCreate) Save(ctx context.Context) (*LatestCurrency, error) {
	var (
		err  error
		node *LatestCurrency
	)
	if err := lcc.defaults(); err != nil {
		return nil, err
	}
	if len(lcc.hooks) == 0 {
		if err = lcc.check(); err != nil {
			return nil, err
		}
		node, err = lcc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LatestCurrencyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = lcc.check(); err != nil {
				return nil, err
			}
			lcc.mutation = mutation
			if node, err = lcc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(lcc.hooks) - 1; i >= 0; i-- {
			if lcc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = lcc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, lcc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*LatestCurrency)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from LatestCurrencyMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (lcc *LatestCurrencyCreate) SaveX(ctx context.Context) *LatestCurrency {
	v, err := lcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lcc *LatestCurrencyCreate) Exec(ctx context.Context) error {
	_, err := lcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lcc *LatestCurrencyCreate) ExecX(ctx context.Context) {
	if err := lcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lcc *LatestCurrencyCreate) defaults() error {
	if _, ok := lcc.mutation.CreatedAt(); !ok {
		if latestcurrency.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized latestcurrency.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := latestcurrency.DefaultCreatedAt()
		lcc.mutation.SetCreatedAt(v)
	}
	if _, ok := lcc.mutation.UpdatedAt(); !ok {
		if latestcurrency.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized latestcurrency.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := latestcurrency.DefaultUpdatedAt()
		lcc.mutation.SetUpdatedAt(v)
	}
	if _, ok := lcc.mutation.DeletedAt(); !ok {
		if latestcurrency.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized latestcurrency.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := latestcurrency.DefaultDeletedAt()
		lcc.mutation.SetDeletedAt(v)
	}
	if _, ok := lcc.mutation.CoinTypeID(); !ok {
		if latestcurrency.DefaultCoinTypeID == nil {
			return fmt.Errorf("ent: uninitialized latestcurrency.DefaultCoinTypeID (forgotten import ent/runtime?)")
		}
		v := latestcurrency.DefaultCoinTypeID()
		lcc.mutation.SetCoinTypeID(v)
	}
	if _, ok := lcc.mutation.FeedType(); !ok {
		v := latestcurrency.DefaultFeedType
		lcc.mutation.SetFeedType(v)
	}
	if _, ok := lcc.mutation.MarketValueHigh(); !ok {
		v := latestcurrency.DefaultMarketValueHigh
		lcc.mutation.SetMarketValueHigh(v)
	}
	if _, ok := lcc.mutation.MarketValueLow(); !ok {
		v := latestcurrency.DefaultMarketValueLow
		lcc.mutation.SetMarketValueLow(v)
	}
	if _, ok := lcc.mutation.ID(); !ok {
		if latestcurrency.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized latestcurrency.DefaultID (forgotten import ent/runtime?)")
		}
		v := latestcurrency.DefaultID()
		lcc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (lcc *LatestCurrencyCreate) check() error {
	if _, ok := lcc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "LatestCurrency.created_at"`)}
	}
	if _, ok := lcc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "LatestCurrency.updated_at"`)}
	}
	if _, ok := lcc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "LatestCurrency.deleted_at"`)}
	}
	return nil
}

func (lcc *LatestCurrencyCreate) sqlSave(ctx context.Context) (*LatestCurrency, error) {
	_node, _spec := lcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (lcc *LatestCurrencyCreate) createSpec() (*LatestCurrency, *sqlgraph.CreateSpec) {
	var (
		_node = &LatestCurrency{config: lcc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: latestcurrency.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: latestcurrency.FieldID,
			},
		}
	)
	_spec.OnConflict = lcc.conflict
	if id, ok := lcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := lcc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: latestcurrency.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := lcc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: latestcurrency.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := lcc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: latestcurrency.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := lcc.mutation.CoinTypeID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: latestcurrency.FieldCoinTypeID,
		})
		_node.CoinTypeID = value
	}
	if value, ok := lcc.mutation.FeedType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: latestcurrency.FieldFeedType,
		})
		_node.FeedType = value
	}
	if value, ok := lcc.mutation.MarketValueHigh(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: latestcurrency.FieldMarketValueHigh,
		})
		_node.MarketValueHigh = value
	}
	if value, ok := lcc.mutation.MarketValueLow(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: latestcurrency.FieldMarketValueLow,
		})
		_node.MarketValueLow = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.LatestCurrency.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LatestCurrencyUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (lcc *LatestCurrencyCreate) OnConflict(opts ...sql.ConflictOption) *LatestCurrencyUpsertOne {
	lcc.conflict = opts
	return &LatestCurrencyUpsertOne{
		create: lcc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.LatestCurrency.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (lcc *LatestCurrencyCreate) OnConflictColumns(columns ...string) *LatestCurrencyUpsertOne {
	lcc.conflict = append(lcc.conflict, sql.ConflictColumns(columns...))
	return &LatestCurrencyUpsertOne{
		create: lcc,
	}
}

type (
	// LatestCurrencyUpsertOne is the builder for "upsert"-ing
	//  one LatestCurrency node.
	LatestCurrencyUpsertOne struct {
		create *LatestCurrencyCreate
	}

	// LatestCurrencyUpsert is the "OnConflict" setter.
	LatestCurrencyUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *LatestCurrencyUpsert) SetCreatedAt(v uint32) *LatestCurrencyUpsert {
	u.Set(latestcurrency.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *LatestCurrencyUpsert) UpdateCreatedAt() *LatestCurrencyUpsert {
	u.SetExcluded(latestcurrency.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *LatestCurrencyUpsert) AddCreatedAt(v uint32) *LatestCurrencyUpsert {
	u.Add(latestcurrency.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *LatestCurrencyUpsert) SetUpdatedAt(v uint32) *LatestCurrencyUpsert {
	u.Set(latestcurrency.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *LatestCurrencyUpsert) UpdateUpdatedAt() *LatestCurrencyUpsert {
	u.SetExcluded(latestcurrency.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *LatestCurrencyUpsert) AddUpdatedAt(v uint32) *LatestCurrencyUpsert {
	u.Add(latestcurrency.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *LatestCurrencyUpsert) SetDeletedAt(v uint32) *LatestCurrencyUpsert {
	u.Set(latestcurrency.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *LatestCurrencyUpsert) UpdateDeletedAt() *LatestCurrencyUpsert {
	u.SetExcluded(latestcurrency.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *LatestCurrencyUpsert) AddDeletedAt(v uint32) *LatestCurrencyUpsert {
	u.Add(latestcurrency.FieldDeletedAt, v)
	return u
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *LatestCurrencyUpsert) SetCoinTypeID(v uuid.UUID) *LatestCurrencyUpsert {
	u.Set(latestcurrency.FieldCoinTypeID, v)
	return u
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *LatestCurrencyUpsert) UpdateCoinTypeID() *LatestCurrencyUpsert {
	u.SetExcluded(latestcurrency.FieldCoinTypeID)
	return u
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *LatestCurrencyUpsert) ClearCoinTypeID() *LatestCurrencyUpsert {
	u.SetNull(latestcurrency.FieldCoinTypeID)
	return u
}

// SetFeedType sets the "feed_type" field.
func (u *LatestCurrencyUpsert) SetFeedType(v string) *LatestCurrencyUpsert {
	u.Set(latestcurrency.FieldFeedType, v)
	return u
}

// UpdateFeedType sets the "feed_type" field to the value that was provided on create.
func (u *LatestCurrencyUpsert) UpdateFeedType() *LatestCurrencyUpsert {
	u.SetExcluded(latestcurrency.FieldFeedType)
	return u
}

// ClearFeedType clears the value of the "feed_type" field.
func (u *LatestCurrencyUpsert) ClearFeedType() *LatestCurrencyUpsert {
	u.SetNull(latestcurrency.FieldFeedType)
	return u
}

// SetMarketValueHigh sets the "market_value_high" field.
func (u *LatestCurrencyUpsert) SetMarketValueHigh(v decimal.Decimal) *LatestCurrencyUpsert {
	u.Set(latestcurrency.FieldMarketValueHigh, v)
	return u
}

// UpdateMarketValueHigh sets the "market_value_high" field to the value that was provided on create.
func (u *LatestCurrencyUpsert) UpdateMarketValueHigh() *LatestCurrencyUpsert {
	u.SetExcluded(latestcurrency.FieldMarketValueHigh)
	return u
}

// ClearMarketValueHigh clears the value of the "market_value_high" field.
func (u *LatestCurrencyUpsert) ClearMarketValueHigh() *LatestCurrencyUpsert {
	u.SetNull(latestcurrency.FieldMarketValueHigh)
	return u
}

// SetMarketValueLow sets the "market_value_low" field.
func (u *LatestCurrencyUpsert) SetMarketValueLow(v decimal.Decimal) *LatestCurrencyUpsert {
	u.Set(latestcurrency.FieldMarketValueLow, v)
	return u
}

// UpdateMarketValueLow sets the "market_value_low" field to the value that was provided on create.
func (u *LatestCurrencyUpsert) UpdateMarketValueLow() *LatestCurrencyUpsert {
	u.SetExcluded(latestcurrency.FieldMarketValueLow)
	return u
}

// ClearMarketValueLow clears the value of the "market_value_low" field.
func (u *LatestCurrencyUpsert) ClearMarketValueLow() *LatestCurrencyUpsert {
	u.SetNull(latestcurrency.FieldMarketValueLow)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.LatestCurrency.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(latestcurrency.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *LatestCurrencyUpsertOne) UpdateNewValues() *LatestCurrencyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(latestcurrency.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.LatestCurrency.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *LatestCurrencyUpsertOne) Ignore() *LatestCurrencyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LatestCurrencyUpsertOne) DoNothing() *LatestCurrencyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LatestCurrencyCreate.OnConflict
// documentation for more info.
func (u *LatestCurrencyUpsertOne) Update(set func(*LatestCurrencyUpsert)) *LatestCurrencyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LatestCurrencyUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *LatestCurrencyUpsertOne) SetCreatedAt(v uint32) *LatestCurrencyUpsertOne {
	return u.Update(func(s *LatestCurrencyUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *LatestCurrencyUpsertOne) AddCreatedAt(v uint32) *LatestCurrencyUpsertOne {
	return u.Update(func(s *LatestCurrencyUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *LatestCurrencyUpsertOne) UpdateCreatedAt() *LatestCurrencyUpsertOne {
	return u.Update(func(s *LatestCurrencyUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *LatestCurrencyUpsertOne) SetUpdatedAt(v uint32) *LatestCurrencyUpsertOne {
	return u.Update(func(s *LatestCurrencyUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *LatestCurrencyUpsertOne) AddUpdatedAt(v uint32) *LatestCurrencyUpsertOne {
	return u.Update(func(s *LatestCurrencyUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *LatestCurrencyUpsertOne) UpdateUpdatedAt() *LatestCurrencyUpsertOne {
	return u.Update(func(s *LatestCurrencyUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *LatestCurrencyUpsertOne) SetDeletedAt(v uint32) *LatestCurrencyUpsertOne {
	return u.Update(func(s *LatestCurrencyUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *LatestCurrencyUpsertOne) AddDeletedAt(v uint32) *LatestCurrencyUpsertOne {
	return u.Update(func(s *LatestCurrencyUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *LatestCurrencyUpsertOne) UpdateDeletedAt() *LatestCurrencyUpsertOne {
	return u.Update(func(s *LatestCurrencyUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *LatestCurrencyUpsertOne) SetCoinTypeID(v uuid.UUID) *LatestCurrencyUpsertOne {
	return u.Update(func(s *LatestCurrencyUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *LatestCurrencyUpsertOne) UpdateCoinTypeID() *LatestCurrencyUpsertOne {
	return u.Update(func(s *LatestCurrencyUpsert) {
		s.UpdateCoinTypeID()
	})
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *LatestCurrencyUpsertOne) ClearCoinTypeID() *LatestCurrencyUpsertOne {
	return u.Update(func(s *LatestCurrencyUpsert) {
		s.ClearCoinTypeID()
	})
}

// SetFeedType sets the "feed_type" field.
func (u *LatestCurrencyUpsertOne) SetFeedType(v string) *LatestCurrencyUpsertOne {
	return u.Update(func(s *LatestCurrencyUpsert) {
		s.SetFeedType(v)
	})
}

// UpdateFeedType sets the "feed_type" field to the value that was provided on create.
func (u *LatestCurrencyUpsertOne) UpdateFeedType() *LatestCurrencyUpsertOne {
	return u.Update(func(s *LatestCurrencyUpsert) {
		s.UpdateFeedType()
	})
}

// ClearFeedType clears the value of the "feed_type" field.
func (u *LatestCurrencyUpsertOne) ClearFeedType() *LatestCurrencyUpsertOne {
	return u.Update(func(s *LatestCurrencyUpsert) {
		s.ClearFeedType()
	})
}

// SetMarketValueHigh sets the "market_value_high" field.
func (u *LatestCurrencyUpsertOne) SetMarketValueHigh(v decimal.Decimal) *LatestCurrencyUpsertOne {
	return u.Update(func(s *LatestCurrencyUpsert) {
		s.SetMarketValueHigh(v)
	})
}

// UpdateMarketValueHigh sets the "market_value_high" field to the value that was provided on create.
func (u *LatestCurrencyUpsertOne) UpdateMarketValueHigh() *LatestCurrencyUpsertOne {
	return u.Update(func(s *LatestCurrencyUpsert) {
		s.UpdateMarketValueHigh()
	})
}

// ClearMarketValueHigh clears the value of the "market_value_high" field.
func (u *LatestCurrencyUpsertOne) ClearMarketValueHigh() *LatestCurrencyUpsertOne {
	return u.Update(func(s *LatestCurrencyUpsert) {
		s.ClearMarketValueHigh()
	})
}

// SetMarketValueLow sets the "market_value_low" field.
func (u *LatestCurrencyUpsertOne) SetMarketValueLow(v decimal.Decimal) *LatestCurrencyUpsertOne {
	return u.Update(func(s *LatestCurrencyUpsert) {
		s.SetMarketValueLow(v)
	})
}

// UpdateMarketValueLow sets the "market_value_low" field to the value that was provided on create.
func (u *LatestCurrencyUpsertOne) UpdateMarketValueLow() *LatestCurrencyUpsertOne {
	return u.Update(func(s *LatestCurrencyUpsert) {
		s.UpdateMarketValueLow()
	})
}

// ClearMarketValueLow clears the value of the "market_value_low" field.
func (u *LatestCurrencyUpsertOne) ClearMarketValueLow() *LatestCurrencyUpsertOne {
	return u.Update(func(s *LatestCurrencyUpsert) {
		s.ClearMarketValueLow()
	})
}

// Exec executes the query.
func (u *LatestCurrencyUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for LatestCurrencyCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LatestCurrencyUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *LatestCurrencyUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: LatestCurrencyUpsertOne.ID is not supported by MySQL driver. Use LatestCurrencyUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *LatestCurrencyUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// LatestCurrencyCreateBulk is the builder for creating many LatestCurrency entities in bulk.
type LatestCurrencyCreateBulk struct {
	config
	builders []*LatestCurrencyCreate
	conflict []sql.ConflictOption
}

// Save creates the LatestCurrency entities in the database.
func (lccb *LatestCurrencyCreateBulk) Save(ctx context.Context) ([]*LatestCurrency, error) {
	specs := make([]*sqlgraph.CreateSpec, len(lccb.builders))
	nodes := make([]*LatestCurrency, len(lccb.builders))
	mutators := make([]Mutator, len(lccb.builders))
	for i := range lccb.builders {
		func(i int, root context.Context) {
			builder := lccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LatestCurrencyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = lccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lccb *LatestCurrencyCreateBulk) SaveX(ctx context.Context) []*LatestCurrency {
	v, err := lccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lccb *LatestCurrencyCreateBulk) Exec(ctx context.Context) error {
	_, err := lccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lccb *LatestCurrencyCreateBulk) ExecX(ctx context.Context) {
	if err := lccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.LatestCurrency.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LatestCurrencyUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (lccb *LatestCurrencyCreateBulk) OnConflict(opts ...sql.ConflictOption) *LatestCurrencyUpsertBulk {
	lccb.conflict = opts
	return &LatestCurrencyUpsertBulk{
		create: lccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.LatestCurrency.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (lccb *LatestCurrencyCreateBulk) OnConflictColumns(columns ...string) *LatestCurrencyUpsertBulk {
	lccb.conflict = append(lccb.conflict, sql.ConflictColumns(columns...))
	return &LatestCurrencyUpsertBulk{
		create: lccb,
	}
}

// LatestCurrencyUpsertBulk is the builder for "upsert"-ing
// a bulk of LatestCurrency nodes.
type LatestCurrencyUpsertBulk struct {
	create *LatestCurrencyCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.LatestCurrency.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(latestcurrency.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *LatestCurrencyUpsertBulk) UpdateNewValues() *LatestCurrencyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(latestcurrency.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.LatestCurrency.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *LatestCurrencyUpsertBulk) Ignore() *LatestCurrencyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LatestCurrencyUpsertBulk) DoNothing() *LatestCurrencyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LatestCurrencyCreateBulk.OnConflict
// documentation for more info.
func (u *LatestCurrencyUpsertBulk) Update(set func(*LatestCurrencyUpsert)) *LatestCurrencyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LatestCurrencyUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *LatestCurrencyUpsertBulk) SetCreatedAt(v uint32) *LatestCurrencyUpsertBulk {
	return u.Update(func(s *LatestCurrencyUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *LatestCurrencyUpsertBulk) AddCreatedAt(v uint32) *LatestCurrencyUpsertBulk {
	return u.Update(func(s *LatestCurrencyUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *LatestCurrencyUpsertBulk) UpdateCreatedAt() *LatestCurrencyUpsertBulk {
	return u.Update(func(s *LatestCurrencyUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *LatestCurrencyUpsertBulk) SetUpdatedAt(v uint32) *LatestCurrencyUpsertBulk {
	return u.Update(func(s *LatestCurrencyUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *LatestCurrencyUpsertBulk) AddUpdatedAt(v uint32) *LatestCurrencyUpsertBulk {
	return u.Update(func(s *LatestCurrencyUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *LatestCurrencyUpsertBulk) UpdateUpdatedAt() *LatestCurrencyUpsertBulk {
	return u.Update(func(s *LatestCurrencyUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *LatestCurrencyUpsertBulk) SetDeletedAt(v uint32) *LatestCurrencyUpsertBulk {
	return u.Update(func(s *LatestCurrencyUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *LatestCurrencyUpsertBulk) AddDeletedAt(v uint32) *LatestCurrencyUpsertBulk {
	return u.Update(func(s *LatestCurrencyUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *LatestCurrencyUpsertBulk) UpdateDeletedAt() *LatestCurrencyUpsertBulk {
	return u.Update(func(s *LatestCurrencyUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *LatestCurrencyUpsertBulk) SetCoinTypeID(v uuid.UUID) *LatestCurrencyUpsertBulk {
	return u.Update(func(s *LatestCurrencyUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *LatestCurrencyUpsertBulk) UpdateCoinTypeID() *LatestCurrencyUpsertBulk {
	return u.Update(func(s *LatestCurrencyUpsert) {
		s.UpdateCoinTypeID()
	})
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *LatestCurrencyUpsertBulk) ClearCoinTypeID() *LatestCurrencyUpsertBulk {
	return u.Update(func(s *LatestCurrencyUpsert) {
		s.ClearCoinTypeID()
	})
}

// SetFeedType sets the "feed_type" field.
func (u *LatestCurrencyUpsertBulk) SetFeedType(v string) *LatestCurrencyUpsertBulk {
	return u.Update(func(s *LatestCurrencyUpsert) {
		s.SetFeedType(v)
	})
}

// UpdateFeedType sets the "feed_type" field to the value that was provided on create.
func (u *LatestCurrencyUpsertBulk) UpdateFeedType() *LatestCurrencyUpsertBulk {
	return u.Update(func(s *LatestCurrencyUpsert) {
		s.UpdateFeedType()
	})
}

// ClearFeedType clears the value of the "feed_type" field.
func (u *LatestCurrencyUpsertBulk) ClearFeedType() *LatestCurrencyUpsertBulk {
	return u.Update(func(s *LatestCurrencyUpsert) {
		s.ClearFeedType()
	})
}

// SetMarketValueHigh sets the "market_value_high" field.
func (u *LatestCurrencyUpsertBulk) SetMarketValueHigh(v decimal.Decimal) *LatestCurrencyUpsertBulk {
	return u.Update(func(s *LatestCurrencyUpsert) {
		s.SetMarketValueHigh(v)
	})
}

// UpdateMarketValueHigh sets the "market_value_high" field to the value that was provided on create.
func (u *LatestCurrencyUpsertBulk) UpdateMarketValueHigh() *LatestCurrencyUpsertBulk {
	return u.Update(func(s *LatestCurrencyUpsert) {
		s.UpdateMarketValueHigh()
	})
}

// ClearMarketValueHigh clears the value of the "market_value_high" field.
func (u *LatestCurrencyUpsertBulk) ClearMarketValueHigh() *LatestCurrencyUpsertBulk {
	return u.Update(func(s *LatestCurrencyUpsert) {
		s.ClearMarketValueHigh()
	})
}

// SetMarketValueLow sets the "market_value_low" field.
func (u *LatestCurrencyUpsertBulk) SetMarketValueLow(v decimal.Decimal) *LatestCurrencyUpsertBulk {
	return u.Update(func(s *LatestCurrencyUpsert) {
		s.SetMarketValueLow(v)
	})
}

// UpdateMarketValueLow sets the "market_value_low" field to the value that was provided on create.
func (u *LatestCurrencyUpsertBulk) UpdateMarketValueLow() *LatestCurrencyUpsertBulk {
	return u.Update(func(s *LatestCurrencyUpsert) {
		s.UpdateMarketValueLow()
	})
}

// ClearMarketValueLow clears the value of the "market_value_low" field.
func (u *LatestCurrencyUpsertBulk) ClearMarketValueLow() *LatestCurrencyUpsertBulk {
	return u.Update(func(s *LatestCurrencyUpsert) {
		s.ClearMarketValueLow()
	})
}

// Exec executes the query.
func (u *LatestCurrencyUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the LatestCurrencyCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for LatestCurrencyCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LatestCurrencyUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
